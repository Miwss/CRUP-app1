@Component - помечаем ей класс, если хотим что бы Спринг создал бин из этого класса
-Именно эту аннотацию сприн ищет, когда сканирует все ваши классы
-можно указать id для создаваемого бина, можно не указывать(тогда название будет название_класса_c_маленькой_буквы)
--------------------------------------------------
@Autowired - Аннотация для внедрения зависимостей, спринг ищет подходящий бин и автоматически внедряет его
-в нашем примере в бин musicPlayer необходимо внедрить бин, который реализует интерфейс Music*
-Спринг сканирует все классы с аннотацией @Component и создает бины для этих классов
-Спринг сканирует все созданные бины и проверяет, подходит ли хотя бы один бин в качестве зависимости там, где мы указали аннотацию @Autowired
-Если находится один подходящий бин, он внедряется в качестве зависимости
-Если не находится ни одного бина - ошибка
-Аннотация @Autowired подбирает подходящие бины по их типу(класс или интерфейс)
-Аннотацию @Autowired можно использовать на полях, сеттерах и конструкторах
--------------------------------------------------
@Qualifier - через данную аннотацию мы уточняем какой конкретно бин хотим внедрить!
- Указываем id того бина, который хотим внедрить!
- НЕОБЫЧНЫЙ СИНТАКСИС! - Когда внедрение производится с помощью КОНСТРУКТОРА, для уточнения зависимостей необходимо
использовать такой синтаксис: Аннотацию @Qualifier необходимо использовать рядом с аргументом конструктора!
--------------------------------------------------
@Value - Данная аннотация позволяет внедрять значение переменным
-Создаем файл пропертис -> передаем туда переменные со значением -> затем прописываем аннотацию над тем полем в котором хотим передать значение -> и в таким синтаксисом добавляем все @Value("${music.name}")
--------------------------------------------------
-@Scope - Область видимости бина
-По дефолту во всех бинах установлен бин "Синглтон"
-Синглтон - при каждом вызове метода getBean - будет возвращатся один и тот же обьект из spring application Context!
-Прототайп - При каждом вызове метода getBean - будет создаватся новый обьект в апликейшн контексте!
--------------------------------------------------
-Жизненный цикл бина!
-Запуск приложения -> Запускается спринг контроллер -> Создается обьект бина ->
В бин внедряются зависимости -> вызывается init-method -> Бин готов к использованию ->
работает приложение -> вызываестя указанный destroy-method -> Остановка Спринг приложения!
==================================================
@PostConstruct
init-method - запускается в ходе инициализации бина, инициализация ресурсов, обращение к внешним файлам, запуск БД.
==================================================
@PreDestroy
destroy-method - запускается в ходе уничтожения бина (при завершении приложения), очищение ресурсов, закрытие потоков ввода-вывода, закрытие доступа к БД.
==================================================
@ModelAttribute - Аннотация может аннотировать как метод, так и аргумент метода, в зависимости от того где указанна аннотация, она работает по разному.
-Когда аннотация аннотирует метод - это означает что в каждую модель мы хотим добавить какую-то пару ключ-значение.
-так же может добавлять в модель любой обьект.

-Когда аннотирует аргумент метода - она берет на себя 3 вещи(Создание обьекта, добавление значений в поля из хтмл формы и добавление этого обьекта/человека с полями в модель).
--------------------------------------------------
АННОТАЦИЯ @VALID (часть ее возможностей)
@Valid -
Для работы с валидатором нам нужно добавить еще одну зависимость в Pom файл - в maven repository -> Hibernate validator - берем файнал версию и добавляем в зависимости.
@NotEmpty - проверяет то, пустая ли строка, если да - выдает сообщение об ошибке!
@Size - диапазон строки который нас устраивает! @Size(min = 2, max = 30, message = "error") - если мы выйдем за одну из границ, то получим "message".
@Min - устанавливает минимальное значение для числового поля! @Min(value = 0, message = "error") - так мы указываем что хотим видеть числа только целые и пооложительные.
@Email - использует регулярные выражения и проверяет валидность мейла.
